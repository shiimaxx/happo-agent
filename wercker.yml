box: "netmarkjp/golang-build:1.13"
command-timeout: 60
build:
  steps:
    - wercker/setup-go-workspace:
        package-dir: github.com/heartbeatsjp/happo-agent
    - script:
        name: "install zip"
        code: sudo apt-get update -y && apt-get install -y zip
    - script:
        name: "goimports"
        code: make imports
    - script:
        name: "golint"
        code: make lint
    - script:
        name: "go test"
        code: make test
    - script:
        name: "build cross"
        code: make build_cross
    - script:
        name: "test subcommands"
        code: |
            set -xe
            cd dist
            tar zxf happo-agent_$(git describe --tags)_linux_amd64.tar.gz
            BINARY="./happo-agent_$(git describe --tags)_linux_amd64/happo-agent"
            ${BINARY:?} -h
            ${BINARY:?} -v
            ${BINARY:?} daemon -h
            ${BINARY:?} add -h
            ${BINARY:?} is_added -h
            ${BINARY:?} remove -h
            ${BINARY:?} append_metric -h
            ${BINARY:?} help
    - script:
        name: "archive"
        code: |
            DIST_DIR="${WERCKER_OUTPUT_DIR:?}/dist"
            mkdir ${DIST_DIR:?} || true
            cd dist
            find . -mindepth 1 -maxdepth 1 -type f | while read line; do cp -p ${line} ${DIST_DIR:?}/ ; done
            cd ${DIST_DIR:?}
            md5sum * > MD5SUM
daemontest:
    steps:
    - wercker/setup-go-workspace:
        package-dir: github.com/heartbeatsjp/happo-agent
    - script:
        name: "install test plugin"
        code: |
            install -m 755 collect/testdata/metrics_test_plugin /usr/local/bin/metrics_test_plugin
            install -m 755 model/testdata/monitor_test_plugin /usr/local/bin/monitor_test_plugin
            install -m 755 model/testdata/monitor_test_sleep /usr/local/bin/monitor_test_sleep
    - tcnksm/gox:
        os: "linux"
        arch: "amd64"
        ldflags: "-X main.Version=$(git describe --tags)"
    - script:
        name: "prepare test daemon behavior"
        code: |
            set -e
            BINARY="${WERCKER_OUTPUT_DIR:?}/pkg/linux_amd64/happo-agent"
            mkdir /etc/happo || :
            cd /etc/happo
            openssl genrsa -out happo-agent.key 2048
            yes "" | openssl req -new -key happo-agent.key -sha256 -out happo-agent.csr
            openssl x509 -in happo-agent.csr -days 3650 -req -signkey happo-agent.key -sha256 -out happo-agent.pub
            touch metrics.yaml
            apt-get -y update
            apt-get -y install jq time bc
    - script:
        name: "test daemon behavior"
        code: |
            set -e
            TEST_DURATION_SEC=2700
            CPU_THRESHOLD_PERCENT=7
            CPU_THRESHOLD_SEC=$(echo "${TEST_DURATION_SEC} * ${CPU_THRESHOLD_PERCENT:?} / 100" | bc)
            MEM_THRESHOLD_KB=51200
            DB_DISK_THRESHOLD_KB=250

            MONITOR_REQUESTS=10000
            MONITOR_REQUESTS_INTERVAL=0.1
            METRICS_COUNT=200

            echo "=== TEST SUMMARY ==="
            echo "TEST_DURATION_SEC=${TEST_DURATION_SEC}"
            echo "CPU_THRESHOLD_PERCENT=${CPU_THRESHOLD_PERCENT}"
            echo "CPU_THRESHOLD_SEC=${CPU_THRESHOLD_SEC}"
            echo "MEM_THRESHOLD_KB=${MEM_THRESHOLD_KB}"
            echo "DB_DISK_THRESHOLD_KB=${DB_DISK_THRESHOLD_KB}"
            echo "MONITOR_REQUESTS=${MONITOR_REQUESTS}"
            echo "MONITOR_REQUESTS_INTERVAL=${MONITOR_REQUESTS_INTERVAL}"
            echo "METRICS_COUNT=${METRICS_COUNT}"
            echo "===================="

            echo "#!/bin/bash"                                                   >> /usr/local/bin/metrics_test_plugin_multi
            echo "for i in \$(seq 1000 \$(expr 1000 + ${METRICS_COUNT:?})) ; do" >> /usr/local/bin/metrics_test_plugin_multi
            echo "echo -n \$i. ; /usr/local/bin/metrics_test_plugin \$i"         >> /usr/local/bin/metrics_test_plugin_multi
            echo "done"                                                          >> /usr/local/bin/metrics_test_plugin_multi
            chmod a+x /usr/local/bin/metrics_test_plugin_multi
            cat /usr/local/bin/metrics_test_plugin_multi

            echo "metrics:"                                   >> /etc/happo/metrics.yaml
            echo "- hostname: happo-agent-test01"             >> /etc/happo/metrics.yaml
            echo "  plugins:"                                 >> /etc/happo/metrics.yaml
            echo "  - plugin_name: metrics_test_plugin_multi" >> /etc/happo/metrics.yaml
            echo "    plugin_option: \"\""                    >> /etc/happo/metrics.yaml

            BINARY="${WERCKER_OUTPUT_DIR:?}/pkg/linux_amd64/happo-agent"
            export MARTINI_ENV="production"
            /usr/bin/time -f "kernel %S sec\nuser %U sec\nusage %P\nrssmax %M KB" -o /tmp/time.out ${BINARY:?} daemon \
              --public-key=/etc/happo/happo-agent.pub \
              --private-key=/etc/happo/happo-agent.key \
              --metric-config=/etc/happo/metrics.yaml \
              --logfile=/dev/stdout &
            sleep 5
            bash -c "touch /tmp/running ; sleep ${TEST_DURATION_SEC:?} ; kill $(pgrep happo-agent) ; rm -f /tmp/running" &

            # use installed test plugins at "install test plugin" step
            for i in $(seq 1 ${MONITOR_REQUESTS:?}); do
              test $(curl -k -XPOST -s https://127.0.0.1:6777/monitor -d '{"apikey":"","plugin_name":"monitor_test_plugin","plugin_option":"0"}' | jq .return_value) -eq 0 && sleep ${MONITOR_REQUESTS_INTERVAL:?} || exit 1
              echo -n .
            done
            echo ""

            while true ; do
              if [[ -f /tmp/running ]]; then
                echo "waiting for the end of test duration."
                sleep 10
              else
                echo "ok"
                break
              fi
            done
            echo ""

            echo "### daemon resource usage ###"
            cat /tmp/time.out
            echo "#############################"
            echo ""

            CPU_USED_SEC=$(echo "$(grep ^kernel /tmp/time.out | awk '{print $2}') + $(grep ^user /tmp/time.out | awk '{print $2}')" | bc)
            echo "CPU_USED_SEC=${CPU_USED_SEC:?}"
            MEM_USED_KB=$(grep ^rssmax /tmp/time.out | awk '{print $2}')
            echo "MEM_USED_KB=${MEM_USED_KB:?}"
            DB_DISK_USAGE_KB=$(du -k happo-agent.db | awk '{print $1}')
            echo "DB_DISK_USAGE_KB=${DB_DISK_USAGE_KB:?}"
            echo ""

            echo "=== TEST SUMMARY ==="
            echo "TEST_DURATION_SEC=${TEST_DURATION_SEC}"
            echo "CPU_THRESHOLD_PERCENT=${CPU_THRESHOLD_PERCENT}"
            echo "CPU_THRESHOLD_SEC=${CPU_THRESHOLD_SEC}"
            echo "MEM_THRESHOLD_KB=${MEM_THRESHOLD_KB}"
            echo "DB_DISK_THRESHOLD_KB=${DB_DISK_THRESHOLD_KB}"
            echo "MONITOR_REQUESTS=${MONITOR_REQUESTS}"
            echo "MONITOR_REQUESTS_INTERVAL=${MONITOR_REQUESTS_INTERVAL}"
            echo "METRICS_COUNT=${METRICS_COUNT}"
            echo "===================="

            echo -n "CPU_USED_SEC=${CPU_USED_SEC:?}"
            [[ $(echo "${CPU_USED_SEC:?} > ${CPU_THRESHOLD_SEC:?}" | bc) -eq 0 ]] && echo " OK" || (echo " NG(CPU_USED_SEC > ${CPU_THRESHOLD_SEC:?})" ; exit 1)

            echo -n "MEM_USED_KB=${MEM_USED_KB:?}"
            [[ $(echo "${MEM_USED_KB:?} > ${MEM_THRESHOLD_KB:?}" | bc) -eq 0 ]] && echo " OK" || (echo " NG(MEM_USED_KB > ${MEM_THRESHOLD_KB:?})" ; exit 1)

            echo -n "DB_DISK_USAGE_KB=${DB_DISK_USAGE_KB:?}"
            [[ $(echo "${DB_DISK_USAGE_KB:?} > ${DB_DISK_THRESHOLD_KB:?}" | bc) -eq 0 ]] && echo " OK" || (echo " NG(DB_DISK_USAGE_KB > ${DB_DISK_THRESHOLD_KB:?})" ; exit 1)
deploy:
    steps:
    - tcnksm/ghr:
        input: dist
        replace: true
        token: $GITHUB_TOKEN
